name: "Cleanup GitHub self hosted runner"
description: "Cleanup a GitHub self hosted runner on AWS"

inputs:
  aws_region:
    description: "AWS region code"
    required: true
  iam_role_arn:
    description: "ARN of the IAM role to assume"
    required: true
  ecs_cluster_name:
    description: "ECS cluster"
    required: true
  pat_token:
    description: "GitHub PAT token to access APIs to manage self hosted runner"
    required: true
  environment:
    description: "Target environment on which the Github Runner will execute tasks"
    default: "dev"
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: ${{ inputs.iam_role_arn }}
    - uses: actions/checkout@v4
    - name: Download ecs_task_id artifact
      uses: actions/download-artifact@v4
      with:
        path: ${{ matrix.index }}_${{ inputs.environment }}_ecs_task_id
        name: ${{ matrix.index }}_${{ inputs.environment }}_ecs_task_id
        merge-multiple: true
    - name: Get ECS Task Id
      id: get_ecs_task_id
      env:
        index: ${{ matrix.index }}
        environment: ${{ inputs.environment }}
      shell: bash
      run: |
        set -eou pipefail

        artifact=$(ls -l ${index}_${environment}_ecs_task_id | grep "${index}_${environment}")

        if [[ -n $artifact ]]; then
          ecs_task_id=$(echo $artifact | awk -F"${index}_${environment}_" '{print $2}')
          echo "ecs_task_id=$ecs_task_id" >> $GITHUB_OUTPUT
        fi
    - name: Cleanup GitHub Runner
      id: cleanup_github_runner
      env:
        ECS_TASK_ID_ENV: ${{ steps.get_ecs_task_id.outputs.ecs_task_id }}
      shell: bash
      run: |
        set -eo pipefail

        RUNNER_NAME="${{ github.run_id }}-${{ matrix.index }}"

        GITHUB_RUNNER_ID=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.pat_token }}" \
          https://api.github.com/repos/${{ github.repository }}/actions/runners \
          | jq '.runners | map(select(.name == "'${RUNNER_NAME}'")) | .[].id' -r)

        ECS_TASK_ID=""

        if [[ -n "${ECS_TASK_ID_ENV}" ]]; then
          ECS_TASK_ID=${ECS_TASK_ID_ENV}
          echo "[INFO] Use ECS Task id from artifact ${ECS_TASK_ID_ENV}"
        else
          ECS_TASK_ID=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.pat_token }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/runners/${GITHUB_RUNNER_ID} \
            | jq -r '.labels[] | select(.name | startswith("task_id:")) | .name' \
            | cut -d: -f2)
        fi

        aws ecs stop-task \
          --cluster ${{ inputs.ecs_cluster_name }} \
          --task ${ECS_TASK_ID} > /dev/null

        echo "[INFO] ECS task ${ECS_TASK_ID} stopped"

        curl -s \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.pat_token }}" \
          https://api.github.com/repos/${{ github.repository }}/actions/runners/${GITHUB_RUNNER_ID}

        START_TIME=$(date +%s)
        while [ $(( $(date +%s) - 120 )) -lt $START_TIME ]; do

          echo "[INFO] Waiting for runner ${{ inputs.runner_name }} to be deleted from Github"

          GITHUB_RUNNER_ID=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.pat_token }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/runners \
            | jq '.runners | map(select(.name == "'${RUNNER_NAME}'")) | .[].id' -r)

          if [ -z "$GITHUB_RUNNER_ID" ]; then
            echo "[INFO] Runner ${RUNNER_NAME} has been deleted"
            break
          fi

          sleep 10

        done

        if [ -n "$GITHUB_RUNNER_ID" ]; then
          echo "[ERROR] Runner ${RUNNER_NAME} was not deleted from Github" >&2
          exit 1
        fi
